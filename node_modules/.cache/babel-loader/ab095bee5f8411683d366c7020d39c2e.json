{"ast":null,"code":"import { INCREASE, DECREASE, CLEAR_CART, REMOVE, GET_TOTALS, GET_AMOUNTS } from \"../action\";\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case DECREASE:\n      let tempCartDec = []; // if (action.payload.amount == 1) {\n      //     tempCartDec = state.cart.filter(\n      //         cartItem => cartItem.id != action.payload.id\n      //     )\n      // } else {\n\n      tempCartDec = state.cart.map(cartItem => {\n        if (cartItem.id == action.payload.id) {\n          cartItem = { ...cartItem,\n            amount: cartItem.amount - 1\n          };\n        }\n\n        return cartItem;\n      }); // }\n\n      return { ...state,\n        cart: tempCartDec\n      };\n\n    case INCREASE:\n      let tempCart = state.cart.map(cartItem => {\n        if (cartItem.id == action.payload.id) {\n          return { ...cartItem,\n            amount: cartItem.amount + 1\n          };\n        }\n\n        return cartItem;\n      });\n      return { ...state,\n        cart: tempCart\n      };\n\n    case CLEAR_CART:\n      return { ...state,\n        cart: []\n      };\n\n    case REMOVE:\n      return { ...state,\n        cart: state.cart.filter(cartItem => cartItem.id != action.payload.id)\n      };\n\n    case GET_TOTALS:\n      let {\n        total,\n        amount\n      } = state.cart.reduce((cartTotal, cartItem) => {\n        const {\n          price,\n          amount\n        } = cartItem;\n        const itemTotal = price * amount;\n        cartTotal.amount += amount;\n        cartTotal.total += itemTotal;\n        return cartTotal;\n      }, {\n        total: 0,\n        amount: 0\n      });\n      total = parseFloat(total.toFixed(2));\n      return { ...state,\n        amount,\n        total\n      };\n\n    default:\n      return state;\n  }\n}\n\nexport default reducer;","map":{"version":3,"sources":["/var/www/html/redux_js/redux-cart/src/reducers/index.js"],"names":["INCREASE","DECREASE","CLEAR_CART","REMOVE","GET_TOTALS","GET_AMOUNTS","reducer","state","action","type","tempCartDec","cart","map","cartItem","id","payload","amount","tempCart","filter","total","reduce","cartTotal","price","itemTotal","parseFloat","toFixed"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,QAAnB,EAA6BC,UAA7B,EAAyCC,MAAzC,EAAiDC,UAAjD,EAA6DC,WAA7D,QAAgF,WAAhF;;AAIA,SAASC,OAAT,CAAiBC,KAAjB,EAAwBC,MAAxB,EAAgC;AAE5B,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKR,QAAL;AAEI,UAAIS,WAAW,GAAG,EAAlB,CAFJ,CAGI;AACA;AACA;AACA;AACA;;AAEIA,MAAAA,WAAW,GAAGH,KAAK,CAACI,IAAN,CAAWC,GAAX,CAAeC,QAAQ,IAAI;AACrC,YAAIA,QAAQ,CAACC,EAAT,IAAeN,MAAM,CAACO,OAAP,CAAeD,EAAlC,EAAsC;AAClCD,UAAAA,QAAQ,GAAG,EAAE,GAAGA,QAAL;AAAeG,YAAAA,MAAM,EAAEH,QAAQ,CAACG,MAAT,GAAkB;AAAzC,WAAX;AAEH;;AACD,eAAOH,QAAP;AACH,OANa,CAAd,CATR,CAgBI;;AAEA,aAAO,EAAE,GAAGN,KAAL;AAAYI,QAAAA,IAAI,EAAED;AAAlB,OAAP;;AAEJ,SAAKV,QAAL;AAEI,UAAIiB,QAAQ,GAAGV,KAAK,CAACI,IAAN,CAAWC,GAAX,CAAeC,QAAQ,IAAI;AAEtC,YAAIA,QAAQ,CAACC,EAAT,IAAeN,MAAM,CAACO,OAAP,CAAeD,EAAlC,EAAsC;AAClC,iBAAO,EAAE,GAAGD,QAAL;AAAeG,YAAAA,MAAM,EAAEH,QAAQ,CAACG,MAAT,GAAkB;AAAzC,WAAP;AACH;;AAED,eAAOH,QAAP;AACH,OAPc,CAAf;AASA,aAAO,EAAE,GAAGN,KAAL;AAAYI,QAAAA,IAAI,EAAEM;AAAlB,OAAP;;AAEJ,SAAKf,UAAL;AACI,aAAO,EAAE,GAAGK,KAAL;AAAYI,QAAAA,IAAI,EAAE;AAAlB,OAAP;;AAEJ,SAAKR,MAAL;AAEI,aAAO,EAAE,GAAGI,KAAL;AAAYI,QAAAA,IAAI,EAAEJ,KAAK,CAACI,IAAN,CAAWO,MAAX,CAAkBL,QAAQ,IAAIA,QAAQ,CAACC,EAAT,IAAeN,MAAM,CAACO,OAAP,CAAeD,EAA5D;AAAlB,OAAP;;AAEJ,SAAKV,UAAL;AAEI,UAAI;AAAEe,QAAAA,KAAF;AAASH,QAAAA;AAAT,UAAoBT,KAAK,CAACI,IAAN,CAAWS,MAAX,CAAkB,CAACC,SAAD,EAAYR,QAAZ,KAAyB;AAE/D,cAAM;AAAES,UAAAA,KAAF;AAASN,UAAAA;AAAT,YAAoBH,QAA1B;AACD,cAAMU,SAAS,GAACD,KAAK,GAACN,MAAtB;AAECK,QAAAA,SAAS,CAACL,MAAV,IAAoBA,MAApB;AACAK,QAAAA,SAAS,CAACF,KAAV,IAAmBI,SAAnB;AAEA,eAAOF,SAAP;AAEH,OAVuB,EAUrB;AACCF,QAAAA,KAAK,EAAE,CADR;AAECH,QAAAA,MAAM,EAAE;AAFT,OAVqB,CAAxB;AAeAG,MAAAA,KAAK,GAAEK,UAAU,CAACL,KAAK,CAACM,OAAN,CAAc,CAAd,CAAD,CAAjB;AAEA,aAAO,EAAE,GAAGlB,KAAL;AAAYS,QAAAA,MAAZ;AAAoBG,QAAAA;AAApB,OAAP;;AAEJ;AACI,aAAOZ,KAAP;AA/DR;AAmEH;;AAGD,eAAeD,OAAf","sourcesContent":["import { INCREASE, DECREASE, CLEAR_CART, REMOVE, GET_TOTALS, GET_AMOUNTS } from \"../action\"\n\n\n\nfunction reducer(state, action) {\n\n    switch (action.type) {\n        case DECREASE:\n\n            let tempCartDec = [];\n            // if (action.payload.amount == 1) {\n            //     tempCartDec = state.cart.filter(\n            //         cartItem => cartItem.id != action.payload.id\n            //     )\n            // } else {\n\n                tempCartDec = state.cart.map(cartItem => {\n                    if (cartItem.id == action.payload.id) {\n                        cartItem = { ...cartItem, amount: cartItem.amount - 1 }\n\n                    }\n                    return cartItem;\n                })\n            // }\n\n            return { ...state, cart: tempCartDec }\n\n        case INCREASE:\n\n            let tempCart = state.cart.map(cartItem => {\n\n                if (cartItem.id == action.payload.id) {\n                    return { ...cartItem, amount: cartItem.amount + 1 }\n                }\n\n                return cartItem\n            });\n\n            return { ...state, cart: tempCart }\n\n        case CLEAR_CART:\n            return { ...state, cart: [] }\n\n        case REMOVE:\n\n            return { ...state, cart: state.cart.filter(cartItem => cartItem.id != action.payload.id) }\n\n        case GET_TOTALS:\n\n            let { total, amount } = state.cart.reduce((cartTotal, cartItem) => {\n\n                const { price, amount } = cartItem;\n               const itemTotal=price*amount;\n\n                cartTotal.amount += amount;\n                cartTotal.total += itemTotal;\n\n                return cartTotal;\n\n            }, {\n                total: 0,\n                amount: 0\n            })\n\n            total =parseFloat(total.toFixed(2));\n\n            return { ...state, amount, total }\n\n        default:\n            return state;\n\n    }\n\n}\n\n\nexport default reducer"]},"metadata":{},"sourceType":"module"}